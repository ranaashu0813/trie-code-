class Solution{
  
    class trinode{
         public:
         char data; 
         trinode *children[26];
         bool is terminal; 
         
         trinode(char ch){
             data = ch; 
             for(int i=0; i<26; i++){
                 children[i] = NULL 
             }
             isterminal = false; 
         }
    };
    class trie{
      public:
      trinode *root ; 
      trie(){
          root = new trinode('\0');
      }
      void insertUtil(trinode *root ,string s){
          
          if (word.length()==0){
                root->terminal = false; 
          }
          int index = word[0]-'a';
          trinode *child; 
          //if element is present 
          if (root->children[index] !=NULL){
              child = root->children[index];
          }
          //condition if element is not present then creation of new child 
          else{
              child = new trinode (word[0]);
              root->children[index]= child ; 
          }
          
          //using recursion function to making
          insertUtil(child,word.substr[1]);
      }
      void insertWord(string word){
          insertUtil(root,word);
      }
    };
    
public:
    vector<vector<string>> displayContacts(int n, string contact[], string s)
    {
       //creation of trie
       trie *root = new trie();
    }
};
